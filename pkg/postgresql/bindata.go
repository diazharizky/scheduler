// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package postgresql generated by go-bindata.// sources:
// migration/000001_create_jobs_table.down.sql
// migration/000001_create_jobs_table.up.sql
package postgresql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migration000001_create_jobs_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\xb3\xe6\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xc8\xca\x4f\x2a\x86\x09\x44\x06\xb8\x2a\xa4\xe6\x95\xe6\xc6\xe7\x64\x96\xa5\x62\x08\x16\x97\x24\x96\x94\x16\x5b\x73\x39\xfb\xfb\xfa\x7a\x86\x58\x03\x02\x00\x00\xff\xff\xbc\x10\x0c\xf6\x4b\x00\x00\x00")

func migration000001_create_jobs_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration000001_create_jobs_tableDownSql,
		"migration/000001_create_jobs_table.down.sql",
	)
}

func migration000001_create_jobs_tableDownSql() (*asset, error) {
	bytes, err := migration000001_create_jobs_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/000001_create_jobs_table.down.sql", size: 75, mode: os.FileMode(420), modTime: time.Unix(1607140274, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migration000001_create_jobs_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\xb1\x6e\xb3\x30\x14\x85\xf7\x3c\xc5\xdd\x20\x52\x86\x5f\xfa\xd5\x29\x93\x43\x6f\x1a\xab\xd8\x20\x73\x69\x43\x17\x44\xc1\x6d\xa9\x82\xa9\x8c\x89\xd4\xb7\xaf\x80\x8a\xa0\xb4\x53\x37\x5b\xe7\x3b\x67\xf8\xee\x0e\xef\xb8\xdc\xae\x02\x85\x8c\x10\x28\x8b\x11\xb4\xe9\x9b\xfc\x54\x9f\x35\xb0\x04\x50\xa6\x02\x7c\xaf\x35\xa5\xf6\x36\xe0\xbd\xb4\x56\x9f\xb5\xf5\xd6\xbf\x54\x3a\x57\xb8\xbe\x5b\x94\x6c\x6f\x4c\x6d\x5e\x87\x9e\xd3\xb6\xa9\x4d\xe1\x74\xb5\xac\xb2\x5d\x88\xc0\xf7\x20\x23\x02\x3c\xf2\x84\x12\x78\x6f\x9f\x3b\xf0\x57\x00\x30\x3c\xf3\xba\x82\x04\x15\x67\x21\xc4\x8a\x0b\xa6\x32\xb8\xc7\x6c\x33\xc6\xda\x38\xfb\x39\x00\x5c\xd2\xb8\x20\xd3\x30\x9c\x22\x53\x34\x1a\x1e\x98\x0a\x0e\x4c\xf9\xff\xff\xad\xaf\xe2\xae\x7c\xd3\x55\x7f\xba\x20\x37\x3f\x90\xa2\x74\x75\x6b\x80\xf0\x78\xbd\x3d\x8a\xb9\x28\xba\xc5\x3d\x4b\x43\x82\x6f\x43\xd3\xfe\x24\x62\x29\x65\xc6\x66\x27\x23\x59\x5a\x3d\x38\xc9\x0b\x07\xc4\x05\x26\xc4\x44\x0c\x8f\x9c\x0e\xe3\x17\x9e\x22\x89\x73\x35\x48\x95\x42\x49\xf9\x0c\x4e\x13\xfd\x47\xf5\xf7\x89\xd5\x70\x8c\x48\x08\x4e\xdb\xaf\x00\x00\x00\xff\xff\x42\x49\x53\x89\x09\x02\x00\x00")

func migration000001_create_jobs_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration000001_create_jobs_tableUpSql,
		"migration/000001_create_jobs_table.up.sql",
	)
}

func migration000001_create_jobs_tableUpSql() (*asset, error) {
	bytes, err := migration000001_create_jobs_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/000001_create_jobs_table.up.sql", size: 521, mode: os.FileMode(420), modTime: time.Unix(1607140274, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migration/000001_create_jobs_table.down.sql": migration000001_create_jobs_tableDownSql,
	"migration/000001_create_jobs_table.up.sql":   migration000001_create_jobs_tableUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"migration": &bintree{nil, map[string]*bintree{
		"000001_create_jobs_table.down.sql": &bintree{migration000001_create_jobs_tableDownSql, map[string]*bintree{}},
		"000001_create_jobs_table.up.sql":   &bintree{migration000001_create_jobs_tableUpSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
